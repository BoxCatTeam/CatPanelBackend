window.SIDEBAR_ITEMS = {"derive":[["DeriveMigrationName","The DeriveMigrationName derive macro will implement `sea_orm_migration::MigrationName` for a migration."],["Iden",""]],"enum":[["ArrayType","[`Value`] types variant for Postgres array"],["BinOper","Binary operator"],["BlobSize",""],["ColumnRef","Column references"],["ColumnSpec","All column specification keywords"],["ColumnType","All column types"],["ConditionExpression","Represents anything that can be passed to an [`Condition::any`] or [`Condition::all`]’s [`Condition::add`] method."],["ConditionHolderContents",""],["ConditionType",""],["DbErr","An error from unsuccessful database operations"],["ForeignKeyAction","Foreign key on update & on delete actions"],["ForeignKeyStatement","All available types of foreign key statement"],["Frame","frame_start or frame_end clause"],["FrameType","Frame type"],["Function","Functions"],["IndexOrder",""],["IndexStatement","All available types of index statement"],["IndexType","Specification of a table index"],["JoinOn","Join on types"],["JoinType","Join types"],["Keyword","Common SQL Keywords"],["LockBehavior","List of lock behavior can be used in select statement"],["LockType","List of lock types that can be used in select statement"],["LogicalChainOper","Logical chain operator"],["Mode",""],["MySqlYear",""],["NullOrdering","Nulls order"],["OnConflictAction","Represents ON CONFLICT (upsert) actions"],["OnConflictTarget","Represents ON CONFLICT (upsert) targets"],["Order","Ordering options"],["PgFunction","Functions"],["PgInterval",""],["QueryStatement","All available types of table query"],["ReturningClause","RETURNING clause."],["SchemaStatement",""],["SearchOrder","For recursive [WithQuery] [WithClause]s the traversing order can be specified in some databases that support this functionality."],["SelectDistinct","List of distinct keywords that can be used in select statement"],["SimpleExpr","Represents a Simple Expression in SQL."],["SubQueryOper","SubQuery operators"],["SubQueryStatement",""],["TableAlterOption","All available table alter options"],["TableDropOpt","All available table drop options"],["TableOpt","All available table options"],["TablePartition","All available table partition options"],["TableRef","Table references"],["TableStatement","All available types of table statement"],["Token",""],["UnOper","Unary operator"],["UnionType","List of union types that can be used in union clause"],["Value","Value variants"],["ValueTuple",""],["WindowSelectType","Window type in [`SelectExpr`]"]],"fn":[["inject_parameters",""],["sea_value_to_json_value","Convert value to json value"]],"macro":[["all","Macro to easily create an [`Condition::all`]."],["any","Macro to easily create an [`Condition::any`]."],["impl_conditional_statement",""],["impl_ordered_statement",""],["impl_query_statement_builder",""],["impl_schema_statement_builder",""],["impl_type_statement_builder",""]],"mod":[["backend","Translating the SQL AST into engine-specific SQL statements."],["error","Error types used in sea-query."],["expr","Building blocks of SQL statements."],["extension","Engine specific SQL features."],["foreign_key","Foreign key definition & alternations statements."],["func","For calling built-in SQL functions."],["index","Index definition & alternations statements."],["prepare","Helper for preparing SQL statements."],["query","Query statements (select, insert, update & delete)."],["schema","Schema definition & alternations statements"],["table","Table definition & alternations statements."],["tests_cfg","Configurations for test cases and examples. Not intended for actual use."],["token","Tokenizer for processing SQL."],["types","Base types used throughout sea-query."],["value","Container for all SQL value types."]],"struct":[["AddColumnOption","table alter add column options"],["Alias","Helper for create name alias"],["CaseStatement",""],["ColumnDef","Specification of a table column"],["CommonTableExpression","A table definition inside a WITH clause ([WithClause])."],["Condition","Represents the value of an [`Condition::any`] or [`Condition::all`]: a set of disjunctive or conjunctive conditions."],["ConditionHolder",""],["Cycle","For recursive [WithQuery] [WithClause]s the CYCLE sql clause can be specified to avoid creating an infinite traversals that loops on graph cycles indefinitely. You specify an expression that identifies a node in the graph and that will be used to determine during the iteration of the execution of the query when appending of new values whether the new values are distinct new nodes or are already visited and therefore they should be added again into the result."],["DeleteStatement","Delete existing rows from the table"],["Expr","Helper to build a [`SimpleExpr`]."],["ForeignKey","Shorthand for constructing any foreign key statement"],["ForeignKeyCreateStatement","Create a foreign key constraint for an existing table. Unsupported by Sqlite"],["ForeignKeyDropStatement","Drop a foreign key constraint for an existing table"],["FrameClause","Frame clause"],["Func","Function call helper."],["Index","Shorthand for constructing any index statement"],["IndexColumn",""],["IndexCreateStatement","Create an index for an existing table"],["IndexDropStatement","Drop an index for an existing table"],["InsertStatement","Insert any new rows into an existing table"],["JoinExpr","Join expression used in select statement"],["LikeExpr","Like Expression"],["LockClause",""],["MysqlQueryBuilder","Mysql query builder."],["NullAlias","Null Alias"],["OnConflict",""],["OrderExpr","Order expression"],["PgFunc","Function call helper."],["PostgresQueryBuilder","Postgres query builder."],["Query","Shorthand for constructing any table query"],["Returning","Shorthand for constructing [`ReturningClause`]"],["SeaRc","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["Search","For recursive [WithQuery] [WithClause]s the traversing order can be specified in some databases that support this functionality."],["SelectExpr","Select expression used in select statement"],["SelectStatement","Select rows from an existing table"],["SqlWriterValues",""],["SqliteQueryBuilder","Sqlite query builder."],["Table","Helper for constructing any table statement"],["TableAlterStatement","Alter a table"],["TableCreateStatement","Create a table"],["TableDropStatement","Drop a table"],["TableForeignKey","Specification of a foreign key"],["TableIndex","Specification of a table index"],["TableRenameStatement","Rename a table"],["TableTruncateStatement","Drop a table"],["Tokenizer",""],["UpdateStatement","Update existing rows in the table"],["ValueTypeErr",""],["Values",""],["WindowStatement","Window expression"],["WithClause","A WITH clause can contain one or multiple common table expressions ([CommonTableExpression])."],["WithQuery","A WITH query. A simple SQL query that has a WITH clause ([WithClause])."]],"trait":[["ConditionalStatement",""],["EscapeBuilder",""],["ForeignKeyBuilder",""],["FromValueTuple",""],["GenericBuilder",""],["Iden","Identifier"],["IdenList",""],["IndexBuilder",""],["IntoColumnRef",""],["IntoCondition",""],["IntoIden",""],["IntoIndexColumn",""],["IntoLikeExpr",""],["IntoTableRef",""],["IntoValueTuple",""],["Nullable",""],["OrderedStatement",""],["OverStatement",""],["QueryBuilder",""],["QueryStatementBuilder",""],["QueryStatementWriter",""],["QuotedBuilder",""],["SchemaBuilder",""],["SchemaStatementBuilder",""],["SqlWriter",""],["TableBuilder",""],["TableRefBuilder",""],["ValueType",""],["Write","A trait for writing or formatting into Unicode-accepting buffers or streams."]],"type":[["Cond",""],["DynIden",""],["MySqlQueryBuilder",""]]};
window.SIDEBAR_ITEMS = {"enum":[["ActiveValue","Defines a stateful value used in ActiveModel."],["ColumnType","The type of column as defined in the SQL format"],["Identity","Defines an operation for an Entity"],["RelationType","Defines the type of relationship"],["Value","Value variants"]],"fn":[["Set","Defines a set operation on an [ActiveValue]"],["Unchanged","Defines an unchanged operation on an [ActiveValue]"],["Unset","Defines an not set operation on an [ActiveValue]"]],"mod":[["prelude","Re-export common types from the entity"]],"struct":[["ColumnDef","Defines a Column for an Entity"],["RelationBuilder","Defines a helper to build a relation"],["RelationDef","Defines a relationship"]],"trait":[["ActiveEnum","A Rust representation of enum defined in database."],["ActiveModelBehavior","A Trait for overriding the ActiveModel behavior"],["ActiveModelTrait","A Trait for ActiveModel to perform Create, Update or Delete operation. The type must also implement the [EntityTrait]. See module level docs [crate::entity] for a full example"],["ColumnTrait","Wrapper of the identically named method in [`sea_query::Expr`]"],["EntityName","A Trait for mapping an Entity to a database table"],["EntityTrait","An Entity implementing `EntityTrait` represents a table in a database."],["FromQueryResult","A Trait for implementing a [QueryResult]"],["IdenStatic","Ensure the identifier for an Entity can be converted to a static str"],["IdentityOf","Check the [Identity] of an Entity"],["IntoActiveModel","A Trait for any type that can be converted into an ActiveModel"],["IntoActiveValue","Constraints to perform the conversion of a type into an [ActiveValue]"],["IntoIdentity","Performs a conversion into an [Identity]"],["Iterable","This trait designates that an `Enum` can be iterated over. It can be auto generated using `strum_macros` on your behalf."],["Linked","A Trait for links between Entities"],["ModelTrait","A Trait for a Model"],["PrimaryKeyToColumn","How to map a Primary Key to a column"],["PrimaryKeyTrait","A Trait for to be used to define a Primary Key."],["Related","Checks if Entities are related"],["RelationTrait","Constraints a type to implement the trait to create a relationship"],["TryIntoModel","A Trait for any type that can be converted into an Model"]],"type":[["ForeignKeyAction","Action to perform on a foreign key whenever there are changes to an ActiveModel"],["LinkDef","Same as [RelationDef]"]]};
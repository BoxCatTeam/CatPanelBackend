window.SIDEBAR_ITEMS = {"derive":[["DeriveActiveEnum","A derive macro to implement `sea_orm::ActiveEnum` trait for enums."],["DeriveActiveModel","The DeriveActiveModel derive macro will implement ActiveModelTrait for ActiveModel which provides setters and getters for all active values in the active model."],["DeriveActiveModelBehavior","Models that a user can override"],["DeriveColumn","The DeriveColumn derive macro will implement [ColumnTrait] for Columns. It defines the identifier of each column by implementing Iden and IdenStatic. The EnumIter is also derived, allowing iteration over all enum variants."],["DeriveCustomColumn","Derive a column if column names are not in snake-case"],["DeriveEntity","Create an Entity"],["DeriveEntityModel","This derive macro is the ‘almighty’ macro which automatically generates Entity, Column, and PrimaryKey from a given Model."],["DeriveIntoActiveModel","Derive into an active model"],["DeriveModel","The DeriveModel derive macro will implement ModelTrait for Model, which provides setters and getters for all attributes in the mod It also implements FromQueryResult to convert a query result into the corresponding Model."],["DerivePrimaryKey","The DerivePrimaryKey derive macro will implement [PrimaryKeyToColumn] for PrimaryKey which defines tedious mappings between primary keys and columns. The [EnumIter] is also derived, allowing iteration over all enum variants."],["DeriveRelation","The DeriveRelation derive macro will implement RelationTrait for Relation."],["EnumIter","Creates a new type that iterates of the variants of an enum."],["FromJsonQueryResult",""],["Iden",""]],"enum":[["ColumnType","The type of column as defined in the SQL format"],["DatabaseConnection","Handle a database connection depending on the backend enabled by the feature flags. This creates a database pool."],["Json","Represents any valid JSON value."],["Value","Value variants"]],"struct":[["ChronoDate","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date."],["ChronoDateTime","ISO 8601 combined date and time without timezone."],["ChronoTime","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation."],["ColumnDef","Defines a Column for an Entity"],["Date","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date."],["DateTime","ISO 8601 combined date and time without timezone."],["Decimal","`Decimal` represents a 128 bit representation of a fixed-precision decimal number. The finite set of values of type `Decimal` are of the form m / 10e, where m is an integer such that -296 < m < 296, and e is an integer between 0 and 28 inclusive."],["QueryResult","Defines the result of a query operation on a Model"],["RelationDef","Defines a relationship"],["Select","Defines a structure to perform select operations"],["Time","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation."],["TimeDate","Date in the proleptic Gregorian calendar."],["TimeDateTime","Combined date and time."],["TimeDateTimeWithTimeZone","A [`PrimitiveDateTime`] with a [`UtcOffset`]."],["TimeTime","The clock time within a given date. Nanosecond precision."],["Uuid","A Universally Unique Identifier (UUID)."]],"trait":[["ActiveEnum","A Rust representation of enum defined in database."],["ActiveModelBehavior","A Trait for overriding the ActiveModel behavior"],["ActiveModelTrait","A Trait for ActiveModel to perform Create, Update or Delete operation. The type must also implement the [EntityTrait]. See module level docs [crate::entity] for a full example"],["ColumnTrait","Wrapper of the identically named method in [`sea_query::Expr`]"],["CursorTrait","A trait for any type that can be turn into a cursor"],["EntityName","A Trait for mapping an Entity to a database table"],["EntityTrait","An Entity implementing `EntityTrait` represents a table in a database."],["Iden","Identifier"],["IdenStatic","Ensure the identifier for an Entity can be converted to a static str"],["Linked","A Trait for links between Entities"],["ModelTrait","A Trait for a Model"],["PaginatorTrait","A Trait for any type that can paginate results"],["PrimaryKeyToColumn","How to map a Primary Key to a column"],["PrimaryKeyTrait","A Trait for to be used to define a Primary Key."],["QueryFilter","Perform a FILTER opertation on a statement"],["Related","Checks if Entities are related"],["RelationTrait","Constraints a type to implement the trait to create a relationship"]],"type":[["ChronoDateTimeLocal","Date time represented in local time"],["ChronoDateTimeUtc","Date time represented in UTC"],["ChronoDateTimeWithTimeZone","Date time with fixed offset"],["DateTimeLocal","Date time represented in local time"],["DateTimeUtc","Date time represented in UTC"],["DateTimeWithTimeZone","Date time with fixed offset"],["DbConn","The same as a [DatabaseConnection]"],["ForeignKeyAction","Action to perform on a foreign key whenever there are changes to an ActiveModel"]]};
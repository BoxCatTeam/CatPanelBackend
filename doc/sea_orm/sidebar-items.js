window.SIDEBAR_ITEMS = {"derive":[["DeriveActiveEnum","A derive macro to implement `sea_orm::ActiveEnum` trait for enums."],["DeriveActiveModel","The DeriveActiveModel derive macro will implement ActiveModelTrait for ActiveModel which provides setters and getters for all active values in the active model."],["DeriveActiveModelBehavior","Models that a user can override"],["DeriveColumn","The DeriveColumn derive macro will implement [ColumnTrait] for Columns. It defines the identifier of each column by implementing Iden and IdenStatic. The EnumIter is also derived, allowing iteration over all enum variants."],["DeriveCustomColumn","Derive a column if column names are not in snake-case"],["DeriveEntity","Create an Entity"],["DeriveEntityModel","This derive macro is the ‘almighty’ macro which automatically generates Entity, Column, and PrimaryKey from a given Model."],["DeriveIden",""],["DeriveIntoActiveModel","Derive into an active model"],["DeriveMigrationName","The DeriveMigrationName derive macro will implement `sea_orm_migration::MigrationName` for a migration."],["DeriveModel","The DeriveModel derive macro will implement ModelTrait for Model, which provides setters and getters for all attributes in the mod It also implements FromQueryResult to convert a query result into the corresponding Model."],["DerivePrimaryKey","The DerivePrimaryKey derive macro will implement [PrimaryKeyToColumn] for PrimaryKey which defines tedious mappings between primary keys and columns. The [EnumIter] is also derived, allowing iteration over all enum variants."],["DeriveRelation","The DeriveRelation derive macro will implement RelationTrait for Relation."],["EnumIter","Creates a new type that iterates of the variants of an enum."],["FromJsonQueryResult",""],["FromQueryResult","Convert a query result into the corresponding Model."],["Iden",""]],"enum":[["AccessMode","Access mode"],["DatabaseBackend","The type of database backend for real world databases. This is enabled by feature flags as specified in the crate documentation"],["DatabaseConnection","Handle a database connection depending on the backend enabled by the feature flags. This creates a database pool."],["IsolationLevel","Isolation level"],["TransactionError","Defines errors for handling transaction failures"],["TryGetError","An error from trying to get a row from a Model"],["Value","Value variants"]],"fn":[["sqlx_error_to_conn_err","Converts an [sqlx::error] connection error to a [DbErr]"],["sqlx_error_to_exec_err","Converts an [sqlx::error] execution error to a [DbErr]"],["sqlx_error_to_query_err","Converts an [sqlx::error] query error to a [DbErr]"]],"macro":[["debug_print","Non-debug version"],["debug_query","Helper to get a raw SQL string from an object that impl `QueryTrait`."],["debug_query_stmt","Helper to get a `Statement` from an object that impl `QueryTrait`."]],"mod":[["entity","Module for the Entity type and operations"],["error","Error types for all database operations"],["metric","Holds types and methods to perform metric collection"],["query","Holds types and methods to perform queries"],["schema","Holds types that defines the schemas of an Entity"]],"struct":[["ConnectOptions","Defines the configuration options of a database"],["Cursor","Cursor pagination"],["Database","Defines a database"],["DatabaseTransaction","Defines a database transaction, whether it is an open transaction and the type of backend to use"],["DeleteResult","The result of a DELETE operation"],["Deleter","Handles DELETE operations in a ActiveModel using [DeleteStatement]"],["ExecResult","Defines the result of executing an operation"],["InsertResult","The result of an INSERT operation on an ActiveModel"],["Inserter","Defines a structure to perform INSERT operations in an ActiveModel"],["ItemsAndPagesNumber","Define a structure containing the numbers of items and pages of a Paginator"],["Paginator","Defined a structure to handle pagination of a result from a query operation on a Model"],["QueryResult","Defines the result of a query operation on a Model"],["QueryStream","The self-referencing struct."],["SelectGetableValue","Perform an operation on an entity that can yield a Value"],["SelectModel","Defines a type to get a Model"],["SelectTwoModel","Defines a type to get two Modelss"],["Selector","Defines a type to do `SELECT` operations through a [SelectStatement] on a Model"],["SelectorRaw","Performs a raw `SELECT` operation on a model"],["SqlxSqliteConnector","Defines the [sqlx::sqlite] connector"],["SqlxSqlitePoolConnection","Defines a sqlx SQLite pool"],["Statement","Defines an SQL statement"],["TransactionStream","The self-referencing struct."],["UpdateResult","The result of an update operation on an ActiveModel"],["Updater","Defines an update operation"],["Values",""]],"trait":[["ConnectionTrait","Creates constraints for any structure that can create a database connection and execute SQL statements"],["CursorTrait","A trait for any type that can be turn into a cursor"],["DeriveIden","Identifier"],["Iden","Identifier"],["PaginatorTrait","A Trait for any type that can paginate results"],["SelectorTrait","A Trait for any type that can perform SELECT queries"],["StatementBuilder","Constraints for building a [Statement]"],["StreamTrait","Stream query results"],["TransactionTrait","Spawn database transaction"],["TryFromU64","Try to convert a type to a u64"],["TryGetable","Constrain any type trying to get a Row in a database"],["TryGetableFromJson","Perform a query on multiple columns"],["TryGetableMany","Perform a query on multiple columns"]],"type":[["DbBackend","The same as [DatabaseBackend] just shorter :)"],["DbConn","The same as a [DatabaseConnection]"],["PinBoxStream","Pin a Model so that stream operations can be performed on the model"]]};
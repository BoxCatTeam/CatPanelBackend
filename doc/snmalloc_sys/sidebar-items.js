window.SIDEBAR_ITEMS = {"fn":[["sn_calloc","Allocate `count` items of `size` length each. Returns `null` if `count * size` overflows or on out-of-memory. All items are initialized to zero."],["sn_free","Free previously allocated memory. The pointer `p` must have been allocated before (or be null)."],["sn_malloc","Allocate `size` bytes. Returns pointer to the allocated memory or null if out of memory. Returns a unique pointer if called with `size` 0."],["sn_malloc_usable_size","Return the available bytes in a memory block."],["sn_realloc","Re-allocate memory to `newsize` bytes. Return pointer to the allocated memory or null if out of memory. If null is returned, the pointer `p` is not freed. Otherwise the original pointer is either freed or returned as the reallocated result (in case it fits in-place with the new size). If `p` is null, it behaves as [`sn_malloc`]. If `newsize` is larger than the original `size` allocated for `p`, the bytes after `size` are uninitialized."],["sn_rust_alloc","Allocate the memory with the given alignment and size. On success, it returns a pointer pointing to the required memory address. On failure, it returns a null pointer. The client must assure the following things:"],["sn_rust_alloc_zeroed","Behaves like rust_alloc, but also ensures that the contents are set to zero before being returned."],["sn_rust_dealloc","De-allocate the memory at the given address with the given alignment and size. The client must assure the following things:"],["sn_rust_realloc","Re-allocate the memory at the given address with the given alignment and size. On success, it returns a pointer pointing to the required memory address. The memory content within the `new_size` will remains the same as previous. On failure, it returns a null pointer. In this situation, the previous memory is not returned to the allocator. The client must assure the following things:"]]};